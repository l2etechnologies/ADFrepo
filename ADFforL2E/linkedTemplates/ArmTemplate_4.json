{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFforL2E"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SCD1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "customertablesqldb",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tCustomer_Id as integer,\n\t\t{Customer Name} as string,\n\t\t{Customer Country} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcust_id as integer,\n\t\tcust_name as string,\n\t\tcust_country as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['cust_id'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tcust_id = Customer_Id,\n\t\tcust_name = {Customer Name},\n\t\tcust_country = {Customer Country}\n\t)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD1_Training')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "scd11",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "customertablesqldb",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tCustomer_Id as integer,\n\t\t{Customer Name} as string,\n\t\t{Customer Country} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcust_id as integer,\n\t\tcust_name as string,\n\t\tcust_country as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['cust_id'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tcust_id = Customer_Id,\n\t\tcust_name = {Customer Name},\n\t\tcust_country = {Customer Country}\n\t)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customertable",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tCustomerID as string,\n\t\tCustomerName as string,\n\t\tContactName as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcust_id as integer,\n\t\tcust_name as string,\n\t\tcust_country as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tcust_id = CustomerID\n\t)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/employeetransformlogic')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EMP1",
								"type": "DatasetReference"
							},
							"name": "SRCSTGEMP1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TGTlessthan200",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "TGTgreaterthan200",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						}
					],
					"script": "source(output(\n\t\tEMPLOYEE_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tEMAIL as string,\n\t\tPHONE_NUMBER as string,\n\t\tHIRE_DATE as string,\n\t\tJOB_ID as string,\n\t\tSALARY as string,\n\t\tCOMMISSION_PCT as string,\n\t\tMANAGER_ID as string,\n\t\tDEPARTMENT_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SRCSTGEMP1\nSRCSTGEMP1 filter(EMPLOYEE_ID > 200) ~> Filter1\nSRCSTGEMP1 filter(EMPLOYEE_ID < 200) ~> Filter2\nFilter2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EMPlessthan200.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EMPlgreaterthan200.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/salesinddataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "salesindiadataset",
								"type": "DatasetReference"
							},
							"name": "errorhandlesoucesalesind"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tablesalesbaddataset",
								"type": "DatasetReference"
							},
							"name": "sinksalesind"
						},
						{
							"dataset": {
								"referenceName": "tablesalesind",
								"type": "DatasetReference"
							},
							"name": "sinkforgoodrows"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "sourcefilenameforerrorrow"
						},
						{
							"name": "sourcefilenameforgoodrows"
						}
					],
					"script": "source(output(\n\t\t{sale date} as string,\n\t\tsaleitem as string,\n\t\tcountry as string,\n\t\tquantity as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> errorhandlesoucesalesind\nerrorhandlesoucesalesind split(isNull(\r\n    toDate({sale date}, 'dd-mm-yyyy')\r\n    ),\n\tdisjoint: false) ~> ConditionalSplit1@(errorrow, goodrows)\nConditionalSplit1@errorrow derive(sourcefilename = 'salesindia2022.csv') ~> sourcefilenameforerrorrow\nConditionalSplit1@goodrows derive(sourcefilename = 'salesindia2022.csv',\n\t\t{sale date} = toDate\r\n(\r\n    {sale date},\r\n    'dd-MM-yyyy'),\n\t\tquantity = toInteger(quantity)) ~> sourcefilenameforgoodrows\nsourcefilenameforerrorrow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tsaledate as string,\n\t\tsaleitem as string,\n\t\tcountry as string,\n\t\tquantity as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tsaledate = {sale date},\n\t\tsaleitem,\n\t\tcountry,\n\t\tquantity\n\t)) ~> sinksalesind\nsourcefilenameforgoodrows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tsaledate as timestamp,\n\t\tsaleitem as string,\n\t\tcountry as string,\n\t\tquantity as integer,\n\t\tsourcefilename as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tsaledate = {sale date},\n\t\tsaleitem,\n\t\tcountry,\n\t\tquantity,\n\t\tsourcefilename\n\t)) ~> sinkforgoodrows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customertablescd",
								"type": "DatasetReference"
							},
							"name": "Sourcefilecsv"
						},
						{
							"dataset": {
								"referenceName": "scd2",
								"type": "DatasetReference"
							},
							"name": "Targettable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "scd2",
								"type": "DatasetReference"
							},
							"name": "InsertNew"
						},
						{
							"dataset": {
								"referenceName": "scd2",
								"type": "DatasetReference"
							},
							"name": "UpdateExisting"
						}
					],
					"transformations": [
						{
							"name": "addingisActive"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Existingrecords"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\t{Customer Id} as integer,\n\t\t{Customer Name} as string,\n\t\t{Customer Country} as string,\n\t\t{Phone Number} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Sourcefilecsv\nsource(output(\n\t\tSeqkey as integer,\n\t\tCustomer_Id as integer,\n\t\tCustomer_Name as string,\n\t\tCustomer_Country as string,\n\t\tPhone_Number as string,\n\t\tisActive as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Targettable\nSourcefilecsv derive(isActive = 1) ~> addingisActive\naddingisActive select(mapColumn(\n\t\t{Customer Id},\n\t\t{Customer Name},\n\t\t{Customer Country},\n\t\t{Phone Number},\n\t\tisActive\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nTargettable select(mapColumn(\n\t\tT_Seqkey = Seqkey,\n\t\tT_Customer_Id = Customer_Id,\n\t\tT_Customer_Name = Customer_Name,\n\t\tT_Customer_Country = Customer_Country,\n\t\tT_Phone_Number = Phone_Number,\n\t\tT_isActive = isActive\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSourcefilecsv, Select2 lookup({Customer Id} == T_Customer_Id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 filter(!isNull(T_Customer_Id)) ~> Existingrecords\nDerivedColumn1 alterRow(updateIf(true())) ~> AlterRow1\nExistingrecords select(mapColumn(\n\t\tT_Seqkey,\n\t\tT_Customer_Id,\n\t\tT_Customer_Name,\n\t\tT_Customer_Country,\n\t\tT_Phone_Number,\n\t\tT_isActive\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 derive(T_isActive = 0) ~> DerivedColumn1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSeqkey as integer,\n\t\tCustomer_Id as integer,\n\t\tCustomer_Name as string,\n\t\tCustomer_Country as string,\n\t\tPhone_Number as string,\n\t\tisActive as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCustomer_Id = {Customer Id},\n\t\tCustomer_Name = {Customer Name},\n\t\tCustomer_Country = {Customer Country},\n\t\tPhone_Number = {Phone Number},\n\t\tisActive\n\t)) ~> InsertNew\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSeqkey as integer,\n\t\tCustomer_Id as integer,\n\t\tCustomer_Name as string,\n\t\tCustomer_Country as string,\n\t\tPhone_Number as string,\n\t\tisActive as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Seqkey'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSeqkey = T_Seqkey,\n\t\tCustomer_Id = T_Customer_Id,\n\t\tCustomer_Name = T_Customer_Name,\n\t\tCustomer_Country = T_Customer_Country,\n\t\tPhone_Number = T_Phone_Number,\n\t\tisActive = T_isActive\n\t)) ~> UpdateExisting"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactTableLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FactTableLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FactTableLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Factsource": {},
									"DimensionTable": {},
									"TargetFact": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T15:52:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Main_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"batchCount": 2,
							"activities": [
								{
									"name": "Backup_Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Backup_Pipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"srcFolder": {
												"value": "@item().srcFolder",
												"type": "Expression"
											},
											"srcFile": {
												"value": "@item().srcFile",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T02:21:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD_Training1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCD1_Training",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD1_Training",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-08T10:32:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD1_Training')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinesalesinderror')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowerrorsalesind",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "salesinddataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"errorhandlesoucesalesind": {},
									"sinksalesind": {},
									"sinkforgoodrows": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-17T06:55:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/salesinddataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd1_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCD1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-08T01:41:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd2_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "scd2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scd2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Sourcefilecsv": {},
									"Targettable": {},
									"InsertNew": {},
									"UpdateExisting": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-08T18:15:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/scd2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformemployeedata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "employeetransformlogic",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "employeetransformlogic",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SRCSTGEMP1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-12-26T11:04:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/employeetransformlogic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "src_tgt_copy",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 30,
						"startTime": "2021-12-24T08:03:00",
						"endTime": "2021-12-24T18:31:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Mainpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "transformemployeedata",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "src_tgt_copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "transformemployeedata",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "src_tgt_copy",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "src_tgt_copy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-12-26T11:18:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/transformemployeedata')]"
			]
		}
	]
}